source("R/Compatibility.r");  #
source("R/Disparity.r");  #
source("R/General_Plot_Templates.r");  #
source("R/Nexus_File_Routines.r");  #
source("R/Paleo_Tree_extras.r");  #
source("R/Paleophylogeny_Routines.r");  #
source("R/RevBayes_Setup.r");  #
source("R/Wagner_kluges.r");  #
source("R/Wagner_Stats_and_Probability_101.r");  #
library(paleotree);		#install.packages("paleotree", dependencies=TRUE)
library(phangorn);		#install.packages("phangorn", dependencies=TRUE)
library(phytools);		#install.packages("ape", dependencies=TRUE)
library(ape);			#install.packages("ape", dependencies=TRUE)
library(gtools);		#install.packages("gtools", dependencies=TRUE)
library(BayesFactor);	#install.packages("BayesFactor", dependencies=TRUE)
library(phylobase);		#install.packages("phylobase", dependencies=TRUE)
desired_sample <- 25;
r <- 1.0	# expected samples per myr
p <- 1.0	# expected daughter taxa per myr
q <- 1.0	# expected extinctions per myr
pfr <- r/(r+q);	# expected proportion of taxa that we should sample
nTotalTaxa <- ceiling(desired_sample/pfr);
nchars <- 50;
states <- rep(2,nchars);	# let's just use binary characters for now
types <- rep(0,nchars);		# let's just unordered for now
max_changes <- 100;
# simulate a clade with sampling over time using parameters given above
fossil_record <- simFossilRecord(p,q,r,startTaxa=1,nTotalTaxa=nTotalTaxa);
sim_tree_info <- accio_vector_tree_and_ancestors_from_paleotree_output(fossil_record);
chmatrix <- matrix(0,nrow=nTotalTaxa,ncol=nchars);
sim_tree_info <- accersi_vector_tree_and_ancestors_from_paleotree_output(fossil_record);
chmatrix <- matrix(0,nrow=nTotalTaxa,ncol=nchars);
venn_tree_all <- transform_vector_tree_to_venn_tree(sim_tree_info$vector_tree);
branchings_all <- rep(1,length(sim_tree_info$vector_tree));
branchings_all[venn_tree_all[,1]] <- 0;
sim_compat <- evolve_compatibility_over_N_changes(N=max_changes,init_chmatrix=chmatrix,venn_tree=venn_tree_all,branchings=branchings_all,nchars,states,types,hidden_reversals=F,UNKNOWN=-11,INAP=-22);
source("R/Phylogeny_Simulations.r");  #
sim_compat <- evolve_compatibility_over_N_changes(N=max_changes,init_chmatrix=chmatrix,venn_tree=venn_tree_all,branchings=branchings_all,nchars,states,types,hidden_reversals=F,UNKNOWN=-11,INAP=-22);
source('~/Documents/R_Projects/Inverse_Modelling_with_Compatibility/R/Compatibility.r')
sim_compat <- evolve_compatibility_over_N_changes(N=max_changes,init_chmatrix=chmatrix,venn_tree=venn_tree_all,branchings=branchings_all,nchars,states,types,hidden_reversals=F,UNKNOWN=-11,INAP=-22);
par(pin=c(3,3));
mnx <- 5*floor(min(sim_compat[,1])/5);
mxx <- 5*ceiling(max(sim_compat[,1])/5);
mny <- 25*floor(min(sim_compat[,2])/25);
mxy <- 25*ceiling(max(sim_compat[,2])/25);
plot(NA,type='n',axes=FALSE,main="",xlab="Steps",ylab="Compatibility",xlim=c(mnx,mxx),ylim=c(mny,mxy));
specified_axis(axe=1,max_val=mxx,min_val=mnx,maj_break=10,med_break=5,min_break=1,orient=1);
specified_axis(axe=2,max_val=mxy,min_val=mny,maj_break=25,med_break=5,min_break=5,orient=2);
points(sim_compat[,1],sim_compat[,2],pch=22,bg="orange");
